use ethers::core::types::U256;
use std::collections::HashMap;

// Define Rust enum for SchemaType with all variants from SchemaType.sol
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum SchemaType {
    // Unsigned Integers
    Uint8,
    Uint16,
    Uint24,
    Uint32,
    Uint40,
    Uint48,
    Uint56,
    Uint64,
    Uint72,
    Uint80,
    Uint88,
    Uint96,
    Uint104,
    Uint112,
    Uint120,
    Uint128,
    Uint136,
    Uint144,
    Uint152,
    Uint160,
    Uint168,
    Uint176,
    Uint184,
    Uint192,
    Uint200,
    Uint208,
    Uint216,
    Uint224,
    Uint232,
    Uint240,
    Uint248,
    Uint256,
    // Signed Integers
    Int8,
    Int16,
    Int24,
    Int32,
    Int40,
    Int48,
    Int56,
    Int64,
    Int72,
    Int80,
    Int88,
    Int96,
    Int104,
    Int112,
    Int120,
    Int128,
    Int136,
    Int144,
    Int152,
    Int160,
    Int168,
    Int176,
    Int184,
    Int192,
    Int200,
    Int208,
    Int216,
    Int224,
    Int232,
    Int240,
    Int248,
    Int256,
    // Bytes
    Bytes1,
    Bytes2,
    Bytes3,
    Bytes4,
    Bytes5,
    Bytes6,
    Bytes7,
    Bytes8,
    Bytes9,
    Bytes10,
    Bytes11,
    Bytes12,
    Bytes13,
    Bytes14,
    Bytes15,
    Bytes16,
    Bytes17,
    Bytes18,
    Bytes19,
    Bytes20,
    Bytes21,
    Bytes22,
    Bytes23,
    Bytes24,
    Bytes25,
    Bytes26,
    Bytes27,
    Bytes28,
    Bytes29,
    Bytes30,
    Bytes31,
    Bytes32,
    // Other Types
    Bool,
    Address,
    // Arrays
    Uint8Array,
    Uint16Array,
    Uint24Array,
    Uint32Array,
    Uint40Array,
    Uint48Array,
    Uint56Array,
    Uint64Array,
    Uint72Array,
    Uint80Array,
    Uint88Array,
    Uint96Array,
    Uint104Array,
    Uint112Array,
    Uint120Array,
    Uint128Array,
    Uint136Array,
    Uint144Array,
    Uint152Array,
    Uint160Array,
    Uint168Array,
    Uint176Array,
    Uint184Array,
    Uint192Array,
    Uint200Array,
    Uint208Array,
    Uint216Array,
    Uint224Array,
    Uint232Array,
    Uint240Array,
    Uint248Array,
    Uint256Array,
    Int8Array,
    Int16Array,
    Int24Array,
    Int32Array,
    Int40Array,
    Int48Array,
    Int56Array,
    Int64Array,
    Int72Array,
    Int80Array,
    Int88Array,
    Int96Array,
    Int104Array,
    Int112Array,
    Int120Array,
    Int128Array,
    Int136Array,
    Int144Array,
    Int152Array,
    Int160Array,
    Int168Array,
    Int176Array,
    Int184Array,
    Int192Array,
    Int200Array,
    Int208Array,
    Int216Array,
    Int224Array,
    Int232Array,
    Int240Array,
    Int248Array,
    Int256Array,
    Bytes1Array,
    Bytes2Array,
    Bytes3Array,
    Bytes4Array,
    Bytes5Array,
    Bytes6Array,
    Bytes7Array,
    Bytes8Array,
    Bytes9Array,
    Bytes10Array,
    Bytes11Array,
    Bytes12Array,
    Bytes13Array,
    Bytes14Array,
    Bytes15Array,
    Bytes16Array,
    Bytes17Array,
    Bytes18Array,
    Bytes19Array,
    Bytes20Array,
    Bytes21Array,
    Bytes22Array,
    Bytes23Array,
    Bytes24Array,
    Bytes25Array,
    Bytes26Array,
    Bytes27Array,
    Bytes28Array,
    Bytes29Array,
    Bytes30Array,
    Bytes31Array,
    Bytes32Array,
    BoolArray,
    AddressArray,
    // Dynamic Types
    Bytes,
    String,
}

// Mapping enum variants to strings using a hashmap
fn schema_abi_types() -> HashMap<SchemaType, &'static str> {
    let mut map = HashMap::new();
    // Unsigned Integers
    map.insert(SchemaType::Uint8, "uint8");
    map.insert(SchemaType::Uint16, "uint16");
    // ... (Complete mapping for all enum variants)
    // Dynamic Types
    map.insert(SchemaType::Bytes, "bytes");
    map.insert(SchemaType::String, "string");
    map
}

// Static and dynamic ABI types in Rust
const STATIC_ABI_TYPES: &[SchemaType] = &[
    SchemaType::Uint8,
    SchemaType::Uint16,
    /* ... fill this in */
    SchemaType::Bytes32,
];
const DYNAMIC_ABI_TYPES: &[SchemaType] = &[
    SchemaType::BoolArray,
    SchemaType::AddressArray,
    /* ... fill this in */
    SchemaType::String,
];

// Type aliases in Rust
pub type SchemaAbiType = SchemaType;

// Implement is_schema_abi_type function in Rust
pub fn is_schema_abi_type(abi_type: &str) -> bool {
    let schema_types = schema_abi_types();
    schema_types.values().any(|&v| v == abi_type)
}

// Additional logic for handling static and dynamic ABI types
// ...
